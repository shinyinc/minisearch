{"version":3,"file":"index.js","sources":["../../src/SearchableMap/TreeIterator.js","../../src/SearchableMap/fuzzySearch.js","../../src/SearchableMap/SearchableMap.js","../../src/MiniSearch.js"],"sourcesContent":["/**\n* @private\n*/\nclass TreeIterator {\n  constructor (set, type) {\n    const node = set._tree\n    const keys = Object.keys(node)\n    this.set = set\n    this.type = type\n    this.path = keys.length > 0 ? [{ node, keys }] : []\n  }\n\n  next () {\n    const value = this.dive()\n    this.backtrack()\n    return value\n  }\n\n  dive () {\n    if (this.path.length === 0) { return { done: true } }\n    const { node, keys } = last(this.path)\n    if (last(keys) === LEAF) { return { done: false, value: this.result() } }\n    this.path.push({ node: node[last(keys)], keys: Object.keys(node[last(keys)]) })\n    return this.dive()\n  }\n\n  backtrack () {\n    if (this.path.length === 0) { return }\n    last(this.path).keys.pop()\n    if (last(this.path).keys.length > 0) { return }\n    this.path.pop()\n    this.backtrack()\n  }\n\n  key () {\n    return this.set._prefix + this.path\n      .map(({ keys }) => last(keys))\n      .filter(key => key !== LEAF)\n      .join('')\n  }\n\n  value () {\n    return last(this.path).node[LEAF]\n  }\n\n  result () {\n    if (this.type === VALUES) { return this.value() }\n    if (this.type === KEYS) { return this.key() }\n    return [this.key(), this.value()]\n  }\n\n  [Symbol.iterator] () {\n    return this\n  }\n}\n\n/** @ignore */\nconst ENTRIES = 'ENTRIES'\n\n/** @ignore */\nconst KEYS = 'KEYS'\n\n/** @ignore */\nconst VALUES = 'VALUES'\n\n/** @ignore */\nconst LEAF = ''\n\nconst last = function (array) {\n  return array[array.length - 1]\n}\n\nexport { TreeIterator, ENTRIES, KEYS, VALUES, LEAF }\n","import { LEAF } from './TreeIterator.js'\n\n/**\n* @ignore\n*/\nexport const fuzzySearch = function (node, query, maxDistance) {\n  const stack = [{ distance: 0, i: 0, key: '', node }]\n  const results = {}\n  const innerStack = []\n\n  while (stack.length > 0) {\n    const { node, distance, key, i, edit } = stack.pop()\n    Object.keys(node).forEach((k) => {\n      if (k === LEAF) {\n        const totDistance = distance + (query.length - i)\n        const [, d] = results[key] || [null, Infinity]\n        if (totDistance <= maxDistance && totDistance < d) {\n          results[key] = [node[k], totDistance]\n        }\n      } else {\n        withinDistance(query, k, maxDistance - distance, i, edit, innerStack).forEach(({ distance: d, i, edit }) => {\n          stack.push({ node: node[k], distance: distance + d, key: key + k, i, edit })\n        })\n      }\n    })\n  }\n  return results\n}\n\n/**\n* @ignore\n*/\nexport const withinDistance = function (a, b, maxDistance, i, edit, stack) {\n  stack.push({ distance: 0, ia: i, ib: 0, edit })\n  const results = []\n\n  while (stack.length > 0) {\n    const { distance, ia, ib, edit } = stack.pop()\n\n    if (ib === b.length) {\n      results.push({ distance, i: ia, edit })\n      continue\n    }\n\n    if (a[ia] === b[ib]) {\n      stack.push({ distance, ia: ia + 1, ib: ib + 1, edit: NONE })\n    } else {\n      if (distance >= maxDistance) { continue }\n\n      if (edit !== ADD) {\n        stack.push({ distance: distance + 1, ia, ib: ib + 1, edit: DELETE })\n      }\n\n      if (ia < a.length) {\n        if (edit !== DELETE) {\n          stack.push({ distance: distance + 1, ia: ia + 1, ib, edit: ADD })\n        }\n\n        if (edit !== DELETE && edit !== ADD) {\n          stack.push({ distance: distance + 1, ia: ia + 1, ib: ib + 1, edit: CHANGE })\n        }\n      }\n    }\n  }\n\n  return results\n}\n\nconst NONE = 0\nconst CHANGE = 1\nconst ADD = 2\nconst DELETE = 3\n\nexport default fuzzySearch\n","import { TreeIterator, ENTRIES, KEYS, VALUES, LEAF } from './TreeIterator.js'\nimport fuzzySearch from './fuzzySearch.js'\n\n/**\n* A class implementing the same interface as a standard JavaScript `Map` with\n* string keys, but adding support for efficiently searching entries with prefix\n* or fuzzy search. This is the class internally used by `MiniSearch` as the\n* inverted index data structure. The implementation is a radix tree (compressed\n* prefix tree).\n*\n* @implements {Map}\n*/\nclass SearchableMap {\n  constructor (tree = {}, prefix = '') {\n    /** @private */\n    this._tree = tree\n    /** @private */\n    this._prefix = prefix\n  }\n\n  /**\n  * Creates and returns a mutable view of this `SearchableMap`, containing only\n  * entries that share the given prefix.\n  *\n  * @example\n  * let map = new SearchableMap()\n  * map.set(\"unicorn\", 1)\n  * map.set(\"universe\", 2)\n  * map.set(\"university\", 3)\n  * map.set(\"unique\", 4)\n  * map.set(\"hello\", 5)\n  *\n  * let uni = map.atPrefix(\"uni\")\n  * uni.get(\"unique\") // => 4\n  * uni.get(\"unicorn\") // => 1\n  * uni.get(\"hello\") // => undefined\n  *\n  * let univer = map.atPrefix(\"univer\")\n  * univer.get(\"unique\") // => undefined\n  * univer.get(\"universe\") // => 2\n  * univer.get(\"university\") // => 3\n  *\n  * @param {string} prefix - The prefix\n  * @return {SearchableMap} A `SearchableMap` representing a mutable view of the original Map at the given prefix\n  */\n  atPrefix (prefix) {\n    if (!prefix.startsWith(this._prefix)) { throw new Error('Mismatched prefix') }\n    const [node, path] = trackDown(this._tree, prefix.slice(this._prefix.length))\n    if (node === undefined) {\n      const [parentNode, key] = last(path)\n      const nodeKey = Object.keys(parentNode).find(k => k !== LEAF && k.startsWith(key))\n      if (nodeKey !== undefined) {\n        return new SearchableMap({ [nodeKey.slice(key.length)]: parentNode[nodeKey] }, prefix)\n      }\n    }\n    return new SearchableMap(node || {}, prefix)\n  }\n\n  /**\n  * @see https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Map/clear\n  * @return {undefined}\n  */\n  clear () {\n    delete this._size\n    this._tree = {}\n  }\n\n  /**\n  * @see https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Map/delete\n  * @param {string} key\n  * @return {undefined}\n  */\n  delete (key) {\n    delete this._size\n    return remove(this._tree, key)\n  }\n\n  /**\n  * @see https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Map/entries\n  * @return {Iterator}\n  */\n  entries () {\n    return new TreeIterator(this, ENTRIES)\n  }\n\n  /**\n   * @callback SearchableMap~forEachFn\n   * @param {string} key - Key\n   * @param {any} value - Value associated to key\n   * @return any\n   */\n\n  /**\n  * @see https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Map/forEach\n  * @param {SearchableMap~forEachFn} fn\n  * @return {undefined}\n  */\n  forEach (fn) {\n    for (const [key, value] of this) {\n      fn(key, value, this)\n    }\n  }\n\n  /**\n  * Returns a key-value object of all the entries that have a key within the\n  * given edit distance from the search key. The keys of the returned object are\n  * the matching keys, while the values are two-elements arrays where the first\n  * element is the value associated to the key, and the second is the edit\n  * distance of the key to the search key.\n  *\n  * @example\n  * let map = new SearchableMap()\n  * map.set('hello', 'world')\n  * map.set('hell', 'yeah')\n  * map.set('ciao', 'mondo')\n  *\n  * // Get all entries that match the key 'hallo' with a maximum edit distance of 2\n  * map.fuzzyGet('hallo', 2)\n  * // => { \"hello\": [\"world\", 1], \"hell\": [\"yeah\", 2] }\n  *\n  * // In the example, the \"hello\" key has value \"world\" and edit distance of 1\n  * // (change \"e\" to \"a\"), the key \"hell\" has value \"yeah\" and edit distance of 2\n  * // (change \"e\" to \"a\", delete \"o\")\n  *\n  * @param {string} key - The search key\n  * @param {number} maxEditDistance - The maximum edit distance\n  * @return {Object<string, Array>} A key-value object of the matching keys to their value and edit distance\n  */\n  fuzzyGet (key, maxEditDistance) {\n    return fuzzySearch(this._tree, key, maxEditDistance)\n  }\n\n  /**\n  * @see https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Map/get\n  * @param {string} key\n  * @return {any}\n  */\n  get (key) {\n    const node = lookup(this._tree, key)\n    return node !== undefined ? node[LEAF] : undefined\n  }\n\n  /**\n  * @see https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Map/has\n  * @param {string} key\n  * @return {boolean}\n  */\n  has (key) {\n    const node = lookup(this._tree, key)\n    return node !== undefined && node.hasOwnProperty(LEAF)\n  }\n\n  /**\n  * @see https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Map/keys\n  * @return {Iterator}\n  */\n  keys () {\n    return new TreeIterator(this, KEYS)\n  }\n\n  /**\n  * @see https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Map/set\n  * @param {string} key\n  * @param {any} value\n  * @return {SearchableMap} The `SearchableMap` itself, to allow chaining\n  */\n  set (key, value) {\n    if (typeof key !== 'string') { throw new Error('key must be a string') }\n    delete this._size\n    const node = createPath(this._tree, key)\n    node[LEAF] = value\n    return this\n  }\n\n  /**\n  * @see https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Map/size\n  * @type {number}\n  */\n  get size () {\n    if (this._size) { return this._size }\n    /** @ignore */\n    this._size = 0\n    this.forEach(() => { this._size += 1 })\n    return this._size\n  }\n\n  /**\n   * @callback SearchableMap~updateFn\n   * @param {any} currentValue - The current value\n   * @return any - the updated value\n   */\n\n  /**\n  * Updates the value at the given key using the provided function. The function\n  * is called with the current value at the key, and its return value is used as\n  * the new value to be set.\n  *\n  * @example\n  * // Increment the current value by one\n  * searchableMap.update('somekey', (currentValue) => currentValue == null ? 0 : currentValue + 1)\n  *\n  * @param {string} key - The key\n  * @param {SearchableMap~updateFn} fn - The function used to compute the new value from the current one\n  * @return {SearchableMap} The `SearchableMap` itself, to allow chaining\n  */\n  update (key, fn) {\n    if (typeof key !== 'string') { throw new Error('key must be a string') }\n    delete this._size\n    const node = createPath(this._tree, key)\n    node[LEAF] = fn(node[LEAF])\n    return this\n  }\n\n  /**\n  * @see https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Map/values\n  * @return {Iterator}\n  */\n  values () {\n    return new TreeIterator(this, VALUES)\n  }\n\n  /**\n  * @see https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Map/@@iterator\n  * @return {Iterator}\n  */\n  [Symbol.iterator] () {\n    return this.entries()\n  }\n}\n\n/**\n* Creates a `SearchableMap` from an `Iterable` of entries\n*\n* @param {Iterable|Array} entries - Entries to be inserted in the `SearchableMap`\n* @return {SearchableMap} A new `SearchableMap` with the given entries\n**/\nSearchableMap.from = function (entries) {\n  const tree = new SearchableMap()\n  for (const [key, value] of entries) {\n    tree.set(key, value)\n  }\n  return tree\n}\n\n/**\n* Creates a `SearchableMap` from the iterable properties of a JavaScript object\n*\n* @param {Object} object - Object of entries for the `SearchableMap`\n* @return {SearchableMap} A new `SearchableMap` with the given entries\n**/\nSearchableMap.fromObject = function (object) {\n  return SearchableMap.from(Object.entries(object))\n}\n\nconst trackDown = function (tree, key, path = []) {\n  if (key.length === 0) { return [tree, path] }\n  const nodeKey = Object.keys(tree).find(k => k !== LEAF && key.startsWith(k))\n  if (nodeKey === undefined) { return trackDown(undefined, '', [...path, [tree, key]]) }\n  return trackDown(tree[nodeKey], key.slice(nodeKey.length), [...path, [tree, nodeKey]])\n}\n\nconst lookup = function (tree, key) {\n  if (key.length === 0) { return tree }\n  const nodeKey = Object.keys(tree).find(k => k !== LEAF && key.startsWith(k))\n  if (nodeKey === undefined) { return undefined }\n  return lookup(tree[nodeKey], key.slice(nodeKey.length))\n}\n\nconst createPath = function (tree, key) {\n  if (key.length === 0) { return tree }\n  const nodeKey = Object.keys(tree).find(k => k !== LEAF && key.startsWith(k))\n  if (nodeKey === undefined) {\n    const toSplit = Object.keys(tree).find(k => k !== LEAF && k.startsWith(key[0]))\n    if (toSplit === undefined) {\n      tree[key] = {}\n    } else {\n      const prefix = commonPrefix(key, toSplit)\n      tree[prefix] = { [toSplit.slice(prefix.length)]: tree[toSplit] }\n      delete tree[toSplit]\n      return createPath(tree[prefix], key.slice(prefix.length))\n    }\n    return tree[key]\n  }\n  return createPath(tree[nodeKey], key.slice(nodeKey.length))\n}\n\nconst commonPrefix = function (a, b, i = 0, length = Math.min(a.length, b.length), prefix = '') {\n  if (i >= length) { return prefix }\n  if (a[i] !== b[i]) { return prefix }\n  return commonPrefix(a, b, i + 1, length, prefix + a[i])\n}\n\nconst remove = function (tree, key) {\n  const [node, path] = trackDown(tree, key)\n  if (node === undefined) { return }\n  delete node[LEAF]\n  const keys = Object.keys(node)\n  if (keys.length === 0) { cleanup(path) }\n  if (keys.length === 1) { merge(path, keys[0], node[keys[0]]) }\n}\n\nconst cleanup = function (path) {\n  if (path.length === 0) { return }\n  const [node, key] = last(path)\n  delete node[key]\n  if (Object.keys(node).length === 0) {\n    cleanup(path.slice(0, -1))\n  }\n}\n\nconst merge = function (path, key, value) {\n  if (path.length === 0) { return }\n  const [node, nodeKey] = last(path)\n  node[nodeKey + key] = value\n  delete node[nodeKey]\n}\n\nconst last = function (array) {\n  return array[array.length - 1]\n}\n\nexport default SearchableMap\nexport { SearchableMap }\n","import SearchableMap from './SearchableMap/SearchableMap.js'\n\nconst OR = 'or'\nconst AND = 'and'\n\n/**\n* MiniSearch is the main entrypoint class, and represents a full-text search\n* engine.\n*\n* @example\n* const documents = [\n*   {\n*     id: 1,\n*     title: 'Moby Dick',\n*     text: 'Call me Ishmael. Some years ago...',\n*     category: 'fiction'\n*   },\n*   {\n*     id: 2,\n*     title: 'Zen and the Art of Motorcycle Maintenance',\n*     text: 'I can see by my watch...',\n*     category: 'fiction'\n*   },\n*   {\n*     id: 3,\n*     title: 'Neuromancer',\n*     text: 'The sky above the port was...',\n*     category: 'fiction'\n*   },\n*   {\n*     id: 4,\n*     title: 'Zen and the Art of Archery',\n*     text: 'At first sight it must seem...',\n*     category: 'non-fiction'\n*   },\n*   // ...and more\n* ]\n*\n* // Create a search engine that indexes the 'title' and 'text' fields for\n* // full-text search. Search results will include 'title' and 'category' (plus the\n* // id field, that is always stored and returned)\n* const miniSearch = MiniSearch.new({\n*   fields: ['title', 'text'],\n*   storeFields: ['title', 'category']\n* })\n*\n* // Add documents to the index\n* miniSearch.addAll(documents)\n*\n* // Search for documents:\n* let results = miniSearch.search('zen art motorcycle')\n* // => [\n*   { id: 2, title: 'Zen and the Art of Motorcycle Maintenance', category: 'fiction', score: 2.77258 },\n*   { id: 4, title: 'Zen and the Art of Archery', category: 'non-fiction', score: 1.38629 }\n* ]\n* */\nclass MiniSearch {\n  /**\n   * @callback MiniSearch~extractField\n   * @param {Object} document - A document object\n   * @param {string} fieldName - Name of the field to extract\n   * @return string - Value of the field\n   */\n\n  /**\n   * @callback MiniSearch~tokenize\n   * @param {string} text - Text to tokenize\n   * @param {?string} fieldName - Name of the field to tokenize\n   * @return string[] - Tokenized terms\n   */\n\n  /**\n   * @callback MiniSearch~processTerm\n   * @param {string} text - The text to tokenize\n   * @param {?string} fieldName - The name of the field to tokenize\n   * @return string|null|undefined|false - Processed term, or a falsy value to discard the term\n   */\n\n  /**\n  * @param {Object} options - Configuration options\n  * @param {Array<string>} options.fields - Fields to be indexed. Required.\n  * @param {string} [options.idField='id'] - ID field, uniquely identifying a document\n  * @param {Array<string>} [options.storeFields] - Fields to store, so that search results would include them. By default none, so resuts would only contain the id field.\n  * @param {MiniSearch~extractField} [options.extractField] - Function used to get the value of a field in a document\n  * @param {MiniSearch~tokenize} [options.tokenize] - Function used to split a field into individual terms\n  * @param {MiniSearch~processTerm} [options.processTerm] - Function used to process a term before indexing it or searching\n  * @param {Object} [options.searchOptions] - Default search options (see the `search` method for details)\n  *\n  * @example\n  * // Create a search engine that indexes the 'title' and 'text' fields of your\n  * // documents:\n  * const miniSearch = MiniSearch.new({ fields: ['title', 'text'] })\n  *\n  * @example\n  * // Your documents are assumed to include a unique 'id' field, but if you want\n  * // to use a different field for document identification, you can set the\n  * // 'idField' option:\n  * const miniSearch = MiniSearch.new({ idField: 'key', fields: ['title', 'text'] })\n  *\n  * @example\n  * // The full set of options (here with their default value) is:\n  * const miniSearch = MiniSearch.new({\n  *   // idField: field that uniquely identifies a document\n  *   idField: 'id',\n  *\n  *   // extractField: function used to get the value of a field in a document.\n  *   // By default, it assumes the document is a flat object with field names as\n  *   // property keys and field values as string property values, but custom logic\n  *   // can be implemented by setting this option to a custom extractor function.\n  *   extractField: (document, fieldName) => document[fieldName],\n  *\n  *   // tokenize: function used to split fields into individual terms. By\n  *   // default, it is also used to tokenize search queries, unless a specific\n  *   // `tokenize` search option is supplied. When tokenizing an indexed field,\n  *   // the field name is passed as the second argument.\n  *   tokenize: (string, _fieldName) => string.split(SPACE_OR_PUNCTUATION),\n  *\n  *   // processTerm: function used to process each tokenized term before\n  *   // indexing. It can be used for stemming and normalization. Return a falsy\n  *   // value in order to discard a term. By default, it is also used to process\n  *   // search queries, unless a specific `processTerm` option is supplied as a\n  *   // search option. When processing a term from a indexed field, the field\n  *   // name is passed as the second argument.\n  *   processTerm: (term, _fieldName) => term.toLowerCase(),\n  *\n  *   // searchOptions: default search options, see the `search` method for\n  *   // details\n  *   searchOptions: undefined,\n  *\n  *   // fields: document fields to be indexed. Mandatory, but not set by default\n  *   fields: undefined\n  *\n  *   // storeFields: document fields to be stored and returned as part of the\n  *   // search results.\n  *   storeFields: []\n  * })\n  */\n  constructor (options = {}) {\n    /** @private */\n    this._options = { ...defaultOptions, ...options }\n\n    this._options.searchOptions = { ...defaultSearchOptions, ...(this._options.searchOptions || {}) }\n    const { fields } = this._options\n\n    if (fields == null) {\n      throw new Error('MiniSearch: option \"fields\" must be provided')\n    }\n\n    /** @private */\n    this._index = new SearchableMap()\n\n    /** @private */\n    this._documentCount = 0\n\n    /** @private */\n    this._documentIds = {}\n\n    /** @private */\n    this._fieldIds = {}\n\n    /** @private */\n    this._fieldLength = {}\n\n    /** @private */\n    this._averageFieldLength = {}\n\n    /** @private */\n    this._nextId = 0\n\n    /** @private */\n    this._storedFields = {}\n\n    addFields(this, fields)\n  }\n\n  /**\n  * Adds a document to the index\n  *\n  * @param {Object} document - the document to be indexed\n  */\n  add (document) {\n    const { extractField, tokenize, processTerm, fields, idField } = this._options\n    if (getOwnProperty(document, idField) == null) {\n      throw new Error(`MiniSearch: document does not have ID field \"${idField}\"`)\n    }\n    const shortDocumentId = addDocumentId(this, document[idField])\n    saveStoredFields(this, shortDocumentId, document)\n\n    fields.forEach(field => {\n      const fieldValue = extractField(document, field)\n      const tokens = tokenize(fieldValue == null ? '' : fieldValue.toString(), field)\n\n      addFieldLength(this, shortDocumentId, this._fieldIds[field], this.documentCount - 1, tokens.length)\n\n      tokens.forEach(term => {\n        const processedTerm = processTerm(term, field)\n        if (isTruthy(processedTerm)) {\n          addTerm(this, this._fieldIds[field], shortDocumentId, processedTerm)\n        }\n      })\n    })\n  }\n\n  /**\n  * Adds all the given documents to the index\n  *\n  * @param {Object[]} documents - an array of documents to be indexed\n  */\n  addAll (documents) {\n    documents.forEach(document => this.add(document))\n  }\n\n  /**\n  * Adds all the given documents to the index asynchronously.\n  *\n  * Returns a promise that resolves to undefined when the indexing is done. This\n  * method is useful when index many documents, to avoid blocking the main\n  * thread. The indexing is performed asynchronously and in chunks.\n  *\n  * @param {Object[]} documents - an array of documents to be indexed\n  * @param {Object} [options] - Configuration options\n  * @param {number} [options.chunkSize] - Size of the document chunks indexed, 10 by default\n  * @return {Promise} A promise resolving to `null` when the indexing is done\n  */\n  addAllAsync (documents, options = {}) {\n    const { chunkSize = 10 } = options\n    const acc = { chunk: [], promise: Promise.resolve(null) }\n\n    const { chunk, promise } = documents.reduce(({ chunk, promise }, document, i) => {\n      chunk.push(document)\n      if ((i + 1) % chunkSize === 0) {\n        return { chunk: [], promise: promise.then(() => this.addAll(chunk)) }\n      } else {\n        return { chunk, promise }\n      }\n    }, acc)\n\n    return promise.then(() => this.addAll(chunk))\n  }\n\n  /**\n  * Removes the given document from the index.\n  *\n  * The document to delete must NOT have changed between indexing and deletion,\n  * otherwise the index will be corrupted. Therefore, when reindexing a document\n  * after a change, the correct order of operations is:\n  *\n  *   1. remove old version\n  *   2. apply changes\n  *   3. index new version\n  *\n  * @param {Object} document - the document to be removed\n  */\n  remove (document) {\n    const { tokenize, processTerm, extractField, fields, idField } = this._options\n\n    if (getOwnProperty(document, idField) == null) {\n      throw new Error(`MiniSearch: document does not have ID field \"${idField}\"`)\n    }\n\n    const [shortDocumentId] = Object.entries(this._documentIds)\n      .find(([_, longId]) => document[idField] === longId) || []\n\n    if (shortDocumentId == null) {\n      throw new Error(`MiniSearch: cannot remove document with ID ${document[idField]}: it is not in the index`)\n    }\n\n    fields.filter(field => getOwnProperty(document, field) != null).forEach(field => {\n      const tokens = tokenize(extractField(document, field) || '', field)\n\n      tokens.forEach(term => {\n        const processedTerm = processTerm(term, field)\n        if (isTruthy(processedTerm)) {\n          removeTerm(this, this._fieldIds[field], shortDocumentId, processedTerm)\n        }\n      })\n    })\n\n    delete this._storedFields[shortDocumentId]\n    delete this._documentIds[shortDocumentId]\n    this._documentCount -= 1\n  }\n\n  /**\n  * Removes all the given documents from the index. If called with no arguments,\n  * it removes _all_ documents from the index.\n  *\n  * @param {Array<Object>} [documents] - the documents to be removed\n  */\n  removeAll (documents) {\n    if (arguments.length === 0) {\n      this._index = new SearchableMap()\n      this._documentCount = 0\n      this._documentIds = {}\n      this._fieldLength = {}\n      this._averageFieldLength = {}\n      this._storedFields = {}\n      this._nextId = 0\n    } else {\n      documents.forEach(document => this.remove(document))\n    }\n  }\n\n  /**\n   * @callback MiniSearch~prefixFn\n   * @param {string} term - Search term\n   * @param {number} i - Index of the term in the query terms array\n   * @param {string[]} terms - Array of all query terms\n   * @return boolean - `true` to perform prefix search, `false` to not perform it\n   */\n\n  /**\n   * @callback MiniSearch~fuzzyFn\n   * @param {string} term - Search term\n   * @param {number} i - Index of the search term in the tokenized search query\n   * @param {string[]} terms - Array of all query terms\n   * @return number|false - Maximum edit distance, or `false` to not perform fuzzy search\n   */\n\n  /**\n   * @callback MiniSearch~filter\n   * @param {Object} result - A search result\n   * @return boolean - `true` to keep the result, `false` to filter it out\n   */\n\n  /**\n  * Search for documents matching the given search query.\n  *\n  * The result is a list of scored document IDs matching the query, sorted by\n  * descending score, and each including data about which terms were matched and\n  * in which fields.\n  *\n  * @param {string} queryString - Query string to search for\n  * @param {Object} [options] - Search options. Each option, if not given, defaults to the corresponding value of `searchOptions` given to the constructor, or to the library default.\n  * @param {Array<string>} [options.fields] - Fields to search in. If omitted, all fields are searched\n  * @param {Object<string, number>} [options.boost] - Key-value object of boosting values for fields\n  * @param {boolean|MiniSearch~prefixFn} [options.prefix=false] - Whether to perform prefix search. Value can be a boolean, or a function computing the boolean from each tokenized and processed query term. If a function is given, it is called with the following arguments: `term: string` - the query term; `i: number` - the term index in the query terms; `terms: Array<string>` - the array of query terms.\n  * @param {number|false|MiniSearch~fuzzyFn} [options.fuzzy=false] - If set to a number greater than or equal 1, it performs fuzzy search within a maximum edit distance equal to that value. If set to a number less than 1, it performs fuzzy search with a maximum edit distance equal to the term length times the value, rouded at the nearest integer. If set to a function, it calls the function for each tokenized and processed query term and expects a numeric value indicating the maximum edit distance, or a falsy falue if fuzzy search should not be performed. If a function is given, it is called with the following arguments: `term: string` - the query term; `i: number` - the term index in the query terms; `terms: Array<string>` - the array of query terms.\n  * @param {string} [options.combineWith='OR'] - How to combine term queries (it can be 'OR' or 'AND')\n  * @param {MiniSearch~tokenize} [options.tokenize] - Function used to tokenize the search query. It defaults to the same tokenizer used for indexing.\n  * @param {MiniSearch~processTerm} [options.processTerm] - Function used to process each search term. Return a falsy value to discard a term. Defaults to the same function used to process terms upon indexing.\n  * @param {MiniSearch~filter} [options.filter] - Function used to filter search results, for example on the basis of stored fields\n  * @return {Array<{ id: any, score: number, match: Object }>} A sorted array of scored document IDs matching the search\n  *\n  * @example\n  * // Search for \"zen art motorcycle\" with default options: terms have to match\n  * // exactly, and individual terms are joined with OR\n  * miniSearch.search('zen art motorcycle')\n  * // => [ { id: 2, score: 2.77258, match: { ... } }, { id: 4, score: 1.38629, match: { ... } } ]\n  *\n  * @example\n  * // Search only in the 'title' field\n  * miniSearch.search('zen', { fields: ['title'] })\n  *\n  * @example\n  * // Boost a field\n  * miniSearch.search('zen', { boost: { title: 2 } })\n  *\n  * @example\n  * // Search for \"moto\" with prefix search (it will match documents\n  * // containing terms that start with \"moto\" or \"neuro\")\n  * miniSearch.search('moto neuro', { prefix: true })\n  *\n  * @example\n  * // Search for \"ismael\" with fuzzy search (it will match documents containing\n  * // terms similar to \"ismael\", with a maximum edit distance of 0.2 term.length\n  * // (rounded to nearest integer)\n  * miniSearch.search('ismael', { fuzzy: 0.2 })\n  *\n  * @example\n  * // Mix of exact match, prefix search, and fuzzy search\n  * miniSearch.search('ismael mob', {\n  *  prefix: true,\n  *  fuzzy: 0.2\n  * })\n  *\n  * @example\n  * // Perform fuzzy and prefix search depending on the search term. Here\n  * // performing prefix and fuzzy search only on terms longer than 3 characters\n  * miniSearch.search('ismael mob', {\n  *  prefix: term => term.length > 3\n  *  fuzzy: term => term.length > 3 ? 0.2 : null\n  * })\n  *\n  * @example\n  * // Combine search terms with AND (to match only documents that contain both\n  * // \"motorcycle\" and \"art\")\n  * miniSearch.search('motorcycle art', { combineWith: 'AND' })\n  *\n  * @example\n  * // Filter only results in the 'fiction' category (assuming that 'category'\n  * // is a stored field)\n  * miniSearch.search('motorcycle art', {\n  *   filter: (result) => result.category === 'fiction'\n  * })\n  */\n  search (queryString, options = {}) {\n    const { tokenize, processTerm, searchOptions } = this._options\n    options = { tokenize, processTerm, ...searchOptions, ...options }\n    const { tokenize: searchTokenize, processTerm: searchProcessTerm } = options\n    const queries = searchTokenize(queryString)\n      .map((term) => searchProcessTerm(term))\n      .filter(isTruthy)\n      .map(termToQuery(options))\n    const results = queries.map(query => this.executeQuery(query, options))\n    const combinedResults = this.combineResults(results, options.combineWith)\n\n    return Object.entries(combinedResults)\n      .reduce((results, [docId, { score, match, terms, tfScores }]) => {\n        const result = {\n          id: this._documentIds[docId],\n          terms: uniq(terms),\n          allTerms: terms,\n          score,\n          match,\n\t  tfScores\n        }\n        Object.assign(result, this._storedFields[docId])\n        if (options.filter == null || options.filter(result)) {\n          results.push(result)\n        }\n        return results\n      }, [])\n      .sort(({ score: a }, { score: b }) => a < b ? 1 : -1)\n  }\n\n  /**\n  * Provide suggestions for the given search query\n  *\n  * The result is a list of suggested modified search queries, derived from the\n  * given search query, each with a relevance score, sorted by descending score.\n  *\n  * @param {string} queryString - Query string to be expanded into suggestions\n  * @param {Object} [options] - Search options. The supported options and default values are the same as for the `search` method, except that by default prefix search is performed on the last term in the query.\n  * @return {Array<{ suggestion: string, score: number }>} A sorted array of suggestions sorted by relevance score.\n  *\n  * @example\n  * // Get suggestions for 'neuro':\n  * miniSearch.autoSuggest('neuro')\n  * // => [ { suggestion: 'neuromancer', terms: [ 'neuromancer' ], score: 0.46240 } ]\n  *\n  * @example\n  * // Get suggestions for 'zen ar':\n  * miniSearch.autoSuggest('zen ar')\n  * // => [\n  * //  { suggestion: 'zen archery art', terms: [ 'zen', 'archery', 'art' ], score: 1.73332 },\n  * //  { suggestion: 'zen art', terms: [ 'zen', 'art' ], score: 1.21313 }\n  * // ]\n  *\n  * @example\n  * // Correct spelling mistakes using fuzzy search:\n  * miniSearch.autoSuggest('neromancer', { fuzzy: 0.2 })\n  * // => [ { suggestion: 'neuromancer', terms: [ 'neuromancer' ], score: 1.03998 } ]\n  *\n  * @example\n  * // Get suggestions for 'zen ar', but only within the 'fiction' category\n  * // (assuming that 'category' is a stored field):\n  * miniSearch.autoSuggest('zen ar', {\n  *   filter: (result) => result.category === 'fiction'\n  * })\n  * // => [\n  * //  { suggestion: 'zen archery art', terms: [ 'zen', 'archery', 'art' ], score: 1.73332 },\n  * //  { suggestion: 'zen art', terms: [ 'zen', 'art' ], score: 1.21313 }\n  * // ]\n  */\n  autoSuggest (queryString, options = {}) {\n    options = { ...defaultAutoSuggestOptions, ...options }\n    const suggestions = this.search(queryString, options).reduce((suggestions, { score, terms }) => {\n      const phrase = terms.join(' ')\n      if (suggestions[phrase] == null) {\n        suggestions[phrase] = { score, terms, count: 1 }\n      } else {\n        suggestions[phrase].score += score\n        suggestions[phrase].count += 1\n      }\n      return suggestions\n    }, {})\n    return Object.entries(suggestions)\n      .map(([suggestion, { score, terms, count }]) => ({ suggestion, terms, score: score / count }))\n      .sort(({ score: a }, { score: b }) => a < b ? 1 : -1)\n  }\n\n  /**\n  * Number of documents in the index\n  *\n  * @type {number}\n  */\n  get documentCount () {\n    return this._documentCount\n  }\n\n  /**\n  * Deserializes a JSON index (serialized with `miniSearch.toJSON()`) and\n  * instantiates a MiniSearch instance. It should be given the same options\n  * originally used when serializing the index.\n  *\n  * **Warning:** JSON (de)serialization of the index is currently tightly\n  * coupled to the index implementation. For this reason, the current\n  * implementation is to be considered a _beta_ feature, subject to breaking\n  * changes changes in future releases. If a breaking change is introduced,\n  * though, it will be properly reported in the changelog.\n  *\n  * @param {string} json - JSON-serialized index\n  * @param {Object} options - configuration options, same as the constructor\n  * @return {MiniSearch} an instance of MiniSearch\n  */\n  static loadJSON (json, options) {\n    if (options == null) {\n      throw new Error('MiniSearch: loadJSON should be given the same options used when serializing the index')\n    }\n    return MiniSearch.loadJS(JSON.parse(json), options)\n  }\n\n  /**\n  * Get the default value of an option. It will throw an error if no option with\n  * the given name exists.\n  *\n  * @param {string} optionName - name of the option\n  * @return {any} the default value of the given option\n  *\n  * @example\n  * // Get default tokenizer\n  * MiniSearch.getDefault('tokenize')\n  *\n  * @example\n  * // Get default term processor\n  * MiniSearch.getDefault('processTerm')\n  *\n  * @example\n  * // Unknown options will throw an error\n  * MiniSearch.getDefault('notExisting')\n  * // => throws 'MiniSearch: unknown option \"notExisting\"'\n  */\n  static getDefault (optionName) {\n    if (defaultOptions.hasOwnProperty(optionName)) {\n      return defaultOptions[optionName]\n    } else {\n      throw new Error(`MiniSearch: unknown option \"${optionName}\"`)\n    }\n  }\n\n  /**\n  * @private\n  */\n  static loadJS (js, options = {}) {\n    const {\n      index,\n      documentCount,\n      nextId,\n      documentIds,\n      fieldIds,\n      fieldLength,\n      averageFieldLength,\n      storedFields\n    } = js\n    const miniSearch = new MiniSearch(options)\n    miniSearch._index = new SearchableMap(index._tree, index._prefix)\n    miniSearch._documentCount = documentCount\n    miniSearch._nextId = nextId\n    miniSearch._documentIds = documentIds\n    miniSearch._fieldIds = fieldIds\n    miniSearch._fieldLength = fieldLength\n    miniSearch._averageFieldLength = averageFieldLength\n    miniSearch._fieldIds = fieldIds\n    miniSearch._storedFields = storedFields || {}\n    return miniSearch\n  }\n\n  /**\n  * @private\n  * @ignore\n  */\n  executeQuery (query, options = {}) {\n    options = { ...this._options.searchOptions, ...options }\n\n    const boosts = (options.fields || this._options.fields).reduce((boosts, field) =>\n      ({ ...boosts, [field]: getOwnProperty(boosts, field) || 1 }), options.boost || {})\n\n    const {\n      boostDocument,\n      weights: { fuzzy: fuzzyWeight = 0.9, prefix: prefixWeight = 0.75 }\n    } = options\n\n    const exactMatch = termResults(this, query.term, boosts, boostDocument, this._index.get(query.term))\n\n    if (!query.fuzzy && !query.prefix) { return exactMatch }\n\n    const results = [exactMatch]\n\n    if (query.prefix) {\n      this._index.atPrefix(query.term).forEach((term, data) => {\n        const weightedDistance = (0.3 * (term.length - query.term.length)) / term.length\n        results.push(termResults(this, term, boosts, boostDocument, data, prefixWeight, weightedDistance))\n      })\n    }\n\n    if (query.fuzzy) {\n      const maxDistance = query.fuzzy < 1 ? Math.round(query.term.length * query.fuzzy) : query.fuzzy\n      Object.entries(this._index.fuzzyGet(query.term, maxDistance)).forEach(([term, [data, distance]]) => {\n        const weightedDistance = distance / term.length\n        results.push(termResults(this, term, boosts, boostDocument, data, fuzzyWeight, weightedDistance))\n      })\n    }\n\n    return results.reduce(combinators[OR], {})\n  }\n\n  /**\n  * @private\n  * @ignore\n  */\n  combineResults (results, combineWith = OR) {\n    if (results.length === 0) { return {} }\n    const operator = combineWith.toLowerCase()\n    return results.reduce(combinators[operator], null)\n  }\n\n  /**\n  * Allows serialization of the index to JSON, to possibly store it and later\n  * deserialize it with MiniSearch.loadJSON\n  *\n  * **Warning:** JSON (de)serialization of the index is currently tightly\n  * coupled to the index implementation. For this reason, the current\n  * implementation is to be considered a _beta_ feature, subject to breaking\n  * changes changes in future releases. If a breaking change is introduced,\n  * though, it will be reported in the changelog.\n  *\n  * @return {Object} the serializeable representation of the search index\n  */\n  toJSON () {\n    return {\n      index: this._index,\n      documentCount: this._documentCount,\n      nextId: this._nextId,\n      documentIds: this._documentIds,\n      fieldIds: this._fieldIds,\n      fieldLength: this._fieldLength,\n      averageFieldLength: this._averageFieldLength,\n      storedFields: this._storedFields\n    }\n  }\n}\n\nMiniSearch.SearchableMap = SearchableMap\n\nconst addTerm = function (self, fieldId, documentId, term) {\n  self._index.update(term, indexData => {\n    indexData = indexData || {}\n    const fieldIndex = indexData[fieldId] || { df: 0, ds: {} }\n    if (fieldIndex.ds[documentId] == null) { fieldIndex.df += 1 }\n    fieldIndex.ds[documentId] = (fieldIndex.ds[documentId] || 0) + 1\n    return { ...indexData, [fieldId]: fieldIndex }\n  })\n}\n\nconst removeTerm = function (self, fieldId, documentId, term) {\n  if (!self._index.has(term)) {\n    warnDocumentChanged(self, documentId, fieldId, term)\n    return\n  }\n  self._index.update(term, indexData => {\n    const fieldIndex = indexData[fieldId]\n    if (fieldIndex == null || fieldIndex.ds[documentId] == null) {\n      warnDocumentChanged(self, documentId, fieldId, term)\n      return indexData\n    }\n    if (fieldIndex.ds[documentId] <= 1) {\n      if (fieldIndex.df <= 1) {\n        delete indexData[fieldId]\n        return indexData\n      }\n      fieldIndex.df -= 1\n    }\n    if (fieldIndex.ds[documentId] <= 1) {\n      delete fieldIndex.ds[documentId]\n      return indexData\n    }\n    fieldIndex.ds[documentId] -= 1\n    return { ...indexData, [fieldId]: fieldIndex }\n  })\n  if (Object.keys(self._index.get(term)).length === 0) {\n    self._index.delete(term)\n  }\n}\n\nconst warnDocumentChanged = function (self, shortDocumentId, fieldId, term) {\n  if (console == null || console.warn == null) { return }\n  const fieldName = Object.entries(self._fieldIds).find(([name, id]) => id === fieldId)[0]\n  console.warn(`MiniSearch: document with ID ${self._documentIds[shortDocumentId]} has changed before removal: term \"${term}\" was not present in field \"${fieldName}\". Removing a document after it has changed can corrupt the index!`)\n}\n\nconst addDocumentId = function (self, documentId) {\n  const shortDocumentId = self._nextId.toString(36)\n  self._documentIds[shortDocumentId] = documentId\n  self._documentCount += 1\n  self._nextId += 1\n  return shortDocumentId\n}\n\nconst addFields = function (self, fields) {\n  fields.forEach((field, i) => { self._fieldIds[field] = i })\n}\n\nconst termResults = function (self, term, boosts, boostDocument, indexData, weight = 1, editDistance = 0) {\n  if (indexData == null) { return {} }\n  return Object.entries(boosts).reduce((results, [field, boost]) => {\n    const fieldId = self._fieldIds[field]\n    const { df, ds } = indexData[fieldId] || { ds: {} }\n    Object.entries(ds).forEach(([documentId, tf]) => {\n      const docBoost = boostDocument ? boostDocument(self._documentIds[documentId], term) : 1\n      if (!docBoost) { return }\n      const normalizedLength = self._fieldLength[documentId][fieldId] / self._averageFieldLength[fieldId]\n      results[documentId] = results[documentId] || { score: 0, match: {}, terms: [], tfScores:[] }\n      results[documentId].terms.push(term)\n      results[documentId].match[term] = getOwnProperty(results[documentId].match, term) || []\n      const scorePart = docBoost * score(tf, df, self._documentCount, normalizedLength, boost, editDistance)\n    \t\n      results[documentId].score += scorePart\n      results[documentId].tfScores.push(scorePart)\n      results[documentId].match[term].push(field)\n    })\n    return results\n  }, {})\n}\n\nconst getOwnProperty = function (object, property) {\n  return Object.prototype.hasOwnProperty.call(object, property) ? object[property] : undefined\n}\n\nconst addFieldLength = function (self, documentId, fieldId, count, length) {\n  self._averageFieldLength[fieldId] = self._averageFieldLength[fieldId] || 0\n  const totalLength = (self._averageFieldLength[fieldId] * count) + length\n  self._fieldLength[documentId] = self._fieldLength[documentId] || {}\n  self._fieldLength[documentId][fieldId] = length\n  self._averageFieldLength[fieldId] = totalLength / (count + 1)\n}\n\nconst saveStoredFields = function (self, documentId, doc) {\n  const { storeFields, extractField } = self._options\n  if (storeFields == null || storeFields.length === 0) { return }\n  self._storedFields[documentId] = self._storedFields[documentId] || {}\n\n  storeFields.forEach((fieldName) => {\n    const fieldValue = extractField(doc, fieldName)\n    if (fieldValue === undefined) { return }\n    self._storedFields[documentId][fieldName] = fieldValue\n  })\n}\n\nconst combinators = {\n  [OR]: function (a, b) {\n    return Object.entries(b).reduce((combined, [documentId, { score, match, terms, tfScores }]) => {\n      if (combined[documentId] == null) {\n        combined[documentId] = { score, match, terms, tfScores }\n      } else {\n        combined[documentId].score += score\n        combined[documentId].score *= 1.5\n        combined[documentId].tfScores = [...combined[documentId].tfScores, ...tfScores] \n        combined[documentId].terms = [...combined[documentId].terms, ...terms]\n        Object.assign(combined[documentId].match, match)\n      }\n      return combined\n    }, a || {})\n  },\n  [AND]: function (a, b) {\n    if (a == null) { return b }\n    return Object.entries(b).reduce((combined, [documentId, { score, match, terms, tfScores }]) => {\n      if (a[documentId] === undefined) { return combined }\n      combined[documentId] = combined[documentId] || {}\n      combined[documentId].score = a[documentId].score + score\n      combined[documentId].tfScores =[...a[documentId].tfScores, ...tfScores]\n      combined[documentId].match = { ...a[documentId].match, ...match }\n      combined[documentId].terms = [...a[documentId].terms, ...terms]\n      return combined\n    }, {})\n  }\n}\n\nconst tfIdf = function (tf, df, n) {\n  return tf * Math.log(n / df)\n}\n\nconst score = function (termFrequency, documentFrequency, documentCount, normalizedLength, boost, editDistance) {\n  const weight = boost / (1 + (0.333 * boost * editDistance))\n  return weight * tfIdf(termFrequency, documentFrequency, documentCount) / normalizedLength\n}\n\nconst termToQuery = (options) => (term, i, terms) => {\n  const fuzzy = (typeof options.fuzzy === 'function')\n    ? options.fuzzy(term, i, terms)\n    : options.fuzzy\n  const prefix = (typeof options.prefix === 'function')\n    ? options.prefix(term, i, terms)\n    : options.prefix\n  return { term, fuzzy, prefix }\n}\n\nconst uniq = function (array) {\n  return array.filter((element, i, array) => array.indexOf(element) === i)\n}\n\nconst isTruthy = (x) => !!x\n\nconst defaultOptions = {\n  idField: 'id',\n  extractField: (document, fieldName) => document[fieldName],\n  tokenize: (string, _fieldName) => string.split(SPACE_OR_PUNCTUATION),\n  processTerm: (term, _fieldName) => term.toLowerCase(),\n  fields: undefined,\n  searchOptions: undefined,\n  storeFields: []\n}\n\nconst defaultSearchOptions = {\n  combineWith: OR,\n  prefix: false,\n  fuzzy: false,\n  weights: {}\n}\n\nconst defaultAutoSuggestOptions = {\n  prefix: (term, i, terms) => i === terms.length - 1\n}\n\n// This regular expression matches any Unicode space or punctuation character\n// Adapted from https://unicode.org/cldr/utility/list-unicodeset.jsp?a=%5Cp%7BZ%7D%5Cp%7BP%7D&abb=on&c=on&esc=on\nconst SPACE_OR_PUNCTUATION = /[\\n\\r -#%-*,-/:;?@[-\\]_{}\\u00A0\\u00A1\\u00A7\\u00AB\\u00B6\\u00B7\\u00BB\\u00BF\\u037E\\u0387\\u055A-\\u055F\\u0589\\u058A\\u05BE\\u05C0\\u05C3\\u05C6\\u05F3\\u05F4\\u0609\\u060A\\u060C\\u060D\\u061B\\u061E\\u061F\\u066A-\\u066D\\u06D4\\u0700-\\u070D\\u07F7-\\u07F9\\u0830-\\u083E\\u085E\\u0964\\u0965\\u0970\\u09FD\\u0A76\\u0AF0\\u0C77\\u0C84\\u0DF4\\u0E4F\\u0E5A\\u0E5B\\u0F04-\\u0F12\\u0F14\\u0F3A-\\u0F3D\\u0F85\\u0FD0-\\u0FD4\\u0FD9\\u0FDA\\u104A-\\u104F\\u10FB\\u1360-\\u1368\\u1400\\u166E\\u1680\\u169B\\u169C\\u16EB-\\u16ED\\u1735\\u1736\\u17D4-\\u17D6\\u17D8-\\u17DA\\u1800-\\u180A\\u1944\\u1945\\u1A1E\\u1A1F\\u1AA0-\\u1AA6\\u1AA8-\\u1AAD\\u1B5A-\\u1B60\\u1BFC-\\u1BFF\\u1C3B-\\u1C3F\\u1C7E\\u1C7F\\u1CC0-\\u1CC7\\u1CD3\\u2000-\\u200A\\u2010-\\u2029\\u202F-\\u2043\\u2045-\\u2051\\u2053-\\u205F\\u207D\\u207E\\u208D\\u208E\\u2308-\\u230B\\u2329\\u232A\\u2768-\\u2775\\u27C5\\u27C6\\u27E6-\\u27EF\\u2983-\\u2998\\u29D8-\\u29DB\\u29FC\\u29FD\\u2CF9-\\u2CFC\\u2CFE\\u2CFF\\u2D70\\u2E00-\\u2E2E\\u2E30-\\u2E4F\\u3000-\\u3003\\u3008-\\u3011\\u3014-\\u301F\\u3030\\u303D\\u30A0\\u30FB\\uA4FE\\uA4FF\\uA60D-\\uA60F\\uA673\\uA67E\\uA6F2-\\uA6F7\\uA874-\\uA877\\uA8CE\\uA8CF\\uA8F8-\\uA8FA\\uA8FC\\uA92E\\uA92F\\uA95F\\uA9C1-\\uA9CD\\uA9DE\\uA9DF\\uAA5C-\\uAA5F\\uAADE\\uAADF\\uAAF0\\uAAF1\\uABEB\\uFD3E\\uFD3F\\uFE10-\\uFE19\\uFE30-\\uFE52\\uFE54-\\uFE61\\uFE63\\uFE68\\uFE6A\\uFE6B\\uFF01-\\uFF03\\uFF05-\\uFF0A\\uFF0C-\\uFF0F\\uFF1A\\uFF1B\\uFF1F\\uFF20\\uFF3B-\\uFF3D\\uFF3F\\uFF5B\\uFF5D\\uFF5F-\\uFF65]+/u\n\nexport default MiniSearch\n"],"names":["TreeIterator","constructor","set","type","node","_tree","keys","Object","path","length","next","value","dive","backtrack","done","last","LEAF","result","push","pop","key","_prefix","map","filter","join","VALUES","KEYS","Symbol","iterator","ENTRIES","array","fuzzySearch","query","maxDistance","stack","distance","i","results","innerStack","edit","forEach","k","totDistance","d","Infinity","withinDistance","a","b","ia","ib","NONE","ADD","DELETE","CHANGE","SearchableMap","tree","prefix","atPrefix","startsWith","Error","trackDown","slice","undefined","parentNode","nodeKey","find","clear","_size","delete","remove","entries","fn","fuzzyGet","maxEditDistance","get","lookup","has","hasOwnProperty","createPath","size","update","values","from","fromObject","object","toSplit","commonPrefix","Math","min","cleanup","merge","OR","AND","MiniSearch","options","_options","defaultOptions","searchOptions","defaultSearchOptions","fields","_index","_documentCount","_documentIds","_fieldIds","_fieldLength","_averageFieldLength","_nextId","_storedFields","addFields","add","document","extractField","tokenize","processTerm","idField","getOwnProperty","shortDocumentId","addDocumentId","saveStoredFields","field","fieldValue","tokens","toString","addFieldLength","documentCount","term","processedTerm","isTruthy","addTerm","addAll","documents","addAllAsync","chunkSize","acc","chunk","promise","Promise","resolve","reduce","then","_","longId","removeTerm","removeAll","arguments","search","queryString","searchTokenize","searchProcessTerm","queries","termToQuery","executeQuery","combinedResults","combineResults","combineWith","docId","score","match","terms","tfScores","id","uniq","allTerms","assign","sort","autoSuggest","defaultAutoSuggestOptions","suggestions","phrase","count","suggestion","loadJSON","json","loadJS","JSON","parse","getDefault","optionName","js","index","nextId","documentIds","fieldIds","fieldLength","averageFieldLength","storedFields","miniSearch","boosts","boost","boostDocument","weights","fuzzy","fuzzyWeight","prefixWeight","exactMatch","termResults","data","weightedDistance","round","combinators","operator","toLowerCase","toJSON","self","fieldId","documentId","indexData","fieldIndex","df","ds","warnDocumentChanged","console","warn","fieldName","name","weight","editDistance","tf","docBoost","normalizedLength","scorePart","property","prototype","call","totalLength","doc","storeFields","combined","tfIdf","n","log","termFrequency","documentFrequency","element","indexOf","x","string","_fieldName","split","SPACE_OR_PUNCTUATION"],"mappings":"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hB,CAAZ;AACD,CAFD;;AC3TA,MAAMkF,EAAE,GAAG,IAAX;AACA,MAAMC,GAAG,GAAG,KAAZ;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AACA,MAAMC,UAAN,CAAiB;AACf;AACF;AACA;AACA;AACA;AACA;;AAEE;AACF;AACA;AACA;AACA;AACA;;AAEE;AACF;AACA;AACA;AACA;AACA;;AAEE;AACF;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACE5F,EAAAA,WAAW,CAAE6F,OAAO,GAAG,EAAZ,EAAgB;AACzB;AACA,SAAKC,QAAL,qCAAqBC,cAArB,GAAwCF,OAAxC;AAEA,SAAKC,QAAL,CAAcE,aAAd,qCAAmCC,oBAAnC,GAA6D,KAAKH,QAAL,CAAcE,aAAd,IAA+B,EAA5F;AACA,UAAM;AAAEE,MAAAA;AAAF,QAAa,KAAKJ,QAAxB;;AAEA,QAAII,MAAM,IAAI,IAAd,EAAoB;AAClB,YAAM,IAAIxC,KAAJ,CAAU,8CAAV,CAAN;AACD;AAED;;;AACA,SAAKyC,MAAL,GAAc,IAAI9C,aAAJ,EAAd;AAEA;;AACA,SAAK+C,cAAL,GAAsB,CAAtB;AAEA;;AACA,SAAKC,YAAL,GAAoB,EAApB;AAEA;;AACA,SAAKC,SAAL,GAAiB,EAAjB;AAEA;;AACA,SAA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"}